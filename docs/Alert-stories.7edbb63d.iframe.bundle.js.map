{"version":3,"file":"Alert-stories.7edbb63d.iframe.bundle.js","mappings":";AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;AAEA;AACA;;AAIA;AACA;;;AAKA;AACA;AACA;AACA;;AAIA;AACA;AACA;;;;;AAKA;;AAEA;;AAIA;AACA;AACA;;AAEA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;;;AAGA;;;;;ACnFA;ACVA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAGA;AACA;AACA;;;AAGA;;;AAGA;;AAKA;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AC7CA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA","sources":["webpack://sagu-ui/./src/packages/Alert/styles.ts","webpack://sagu-ui/./src/packages/Alert/index.tsx","webpack://sagu-ui/./src/packages/Button/styles.ts","webpack://sagu-ui/./src/styles/spacingModifier.ts"],"sourcesContent":["import styled, { css, DefaultTheme } from 'styled-components'\nimport { AlertProps } from '.'\n\nconst severityShape = {\n  error: (theme: DefaultTheme) => css`\n    background-color: ${theme.colors.base.error}1f;\n  `,\n  warning: (theme: DefaultTheme) => css`\n    background-color: ${theme.colors.base.warning}1f;\n  `,\n  info: (theme: DefaultTheme) => css`\n    background-color: ${theme.colors.base.info}1f;\n  `,\n  success: (theme: DefaultTheme) => css`\n    background-color: ${theme.colors.base.success}1f;\n  `\n}\n\nconst severityIconColor = {\n  error: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.error};\n  `,\n  warning: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.warning};\n  `,\n  info: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.info};\n  `,\n  success: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.success};\n  `\n}\n\nexport const Wrapper = styled.div<Pick<AlertProps, 'severity'>>`\n  ${({ theme, severity = 'info' }) => css`\n    animation-fill-mode: forwards;\n    border-radius: ${theme.border.radius};\n    position: relative;\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    ${!!severity && severityShape[severity](theme)}}\n  `}\n`\n\nexport const Container = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    padding: ${theme.spacings.xsmall} ${theme.spacings.small}\n      ${theme.spacings.xsmall} ${theme.spacings.xsmall};\n  `}\n`\n\nexport const Content = styled.div`\n  ${() => css`\n    flex-grow: 1;\n  `}\n`\n\nexport const Body = styled.div`\n  ${({ theme }) => css`\n    color: ${theme.colors.neutral.xdarkest};\n    font-size: ${theme.font.sizes.small};\n  `}\n`\n\nexport const Header = styled.div`\n  ${({ theme }) => css`\n    font-size: ${theme.font.sizes.medium};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n    color: ${theme.colors.neutral.xdarkest};\n    line-height: 1.3;\n    margin-bottom: ${theme.spacings.mini};\n  `}\n`\n\nexport const IconWrapper = styled.div<Pick<AlertProps, 'severity' | 'header'>>`\n  ${({ theme, severity = 'info', header }) => css`\n    align-self: ${header ? 'flex-start' : 'center'};\n    font-size: 0;\n    margin-right: ${theme.spacings.xxsmall};\n\n    svg {\n      align-items: center;\n      font-size: ${header ? theme.font.sizes.xlarge : theme.font.sizes.xsmall};\n      ${!!severity && severityIconColor[severity](theme)}}\n    }\n  `}\n`\n\nexport const CloseButton = styled.div`\n  ${({ theme }) => css`\n    background: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: ${theme.font.sizes.xsmall};\n    line-height: 1;\n    outline: none;\n    padding-top: ${theme.spacings.mini};\n    position: absolute;\n    right: 0;\n    top: 0;\n  `}\n`\n","import React, { BaseHTMLAttributes, useCallback, useState } from 'react'\nimport { STATUS_ICONS } from '../../utils/statusIcons'\nimport Button from '../Button'\nimport * as S from './styles'\n\nexport type AlertProps = {\n  children: React.ReactNode\n  severity?: 'error' | 'warning' | 'info' | 'success'\n  header?: React.ReactNode\n  showIcon?: boolean\n  closable?: boolean\n  onClose?: (event?: React.MouseEvent<HTMLButtonElement>) => void\n} & BaseHTMLAttributes<HTMLDivElement>\n\ntype DisplayType = 'show' | 'hide'\n\nconst Alert = ({\n  children,\n  severity = 'info',\n  header,\n  showIcon = false,\n  closable = false,\n  onClose,\n  ...props\n}: AlertProps) => {\n  const [display, setDisplay] = useState<DisplayType>('show')\n\n  const handleClose = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setDisplay('hide')\n      onClose?.(event)\n    },\n    [onClose]\n  )\n\n  if (display === 'hide') {\n    return null\n  }\n\n  return (\n    <S.Wrapper role=\"alert\" severity={severity} {...props}>\n      <S.Container>\n        {closable && (\n          <S.CloseButton>\n            <Button outline={false} size=\"xsmall\" onClick={handleClose}>\n              X\n            </Button>\n          </S.CloseButton>\n        )}\n        {showIcon && (\n          <S.IconWrapper severity={severity} header={header}>\n            {STATUS_ICONS[severity as keyof typeof STATUS_ICONS]}\n          </S.IconWrapper>\n        )}\n        <S.Content>\n          {header && <S.Header>{header}</S.Header>}\n          <S.Body>{children}</S.Body>\n        </S.Content>\n      </S.Container>\n    </S.Wrapper>\n  )\n}\n\nexport default Alert\n","import styled, { css, DefaultTheme } from 'styled-components'\nimport { ButtonProps } from '.'\nimport { spacingModifier } from '../../styles/spacingModifier'\n\nconst buttonVariants = {\n  primary: (theme: DefaultTheme) => css`\n    border-color: ${theme.colors.primary.medium};\n    color: ${theme.colors.primary.medium};\n    &:hover {\n      border-color: ${theme.colors.secondary.medium};\n      color: ${theme.colors.secondary.medium};\n    }\n    &:active {\n      border-color: ${theme.colors.secondary.dark};\n      color: ${theme.colors.secondary.dark};\n    }\n  `,\n  secondary: (theme: DefaultTheme) => css`\n    border-color: ${theme.colors.secondary.medium};\n    color: ${theme.colors.secondary.medium};\n    &:hover {\n      border-color: ${theme.colors.primary.light};\n      color: ${theme.colors.primary.light};\n    }\n    &:active {\n      border-color: ${theme.colors.primary.medium};\n      color: ${theme.colors.primary.medium};\n    }\n  `,\n  filled: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.white};\n    background: ${theme.colors.primary.medium};\n\n    &:hover {\n      background: ${theme.colors.primary.dark};\n    }\n    &:active {\n      background: ${theme.colors.primary.medium};\n    }\n  `\n}\n\nexport const Button = styled.button<\n  Pick<ButtonProps, 'variant' | 'outline' | 'size' | 'padding'>\n>`\n  ${({ theme, variant, outline, size = 'small', padding = 'xxsmall' }) => css`\n    cursor: pointer;\n    border: ${outline ? '0.2rem solid' : 'none'} ;\n    background-color: transparent;\n    font-weight: ${theme.font.weights.bold};\n    border-radius: ${theme.border.radius};\n    transition: ${theme.transitions.default};\n    font-size: ${theme.font.sizes[size]};\n    ${spacingModifier[padding](theme, 'padding')}\n    ${!!variant && buttonVariants[variant](theme)}}\n  `}\n`\n","import { DefaultTheme, css } from 'styled-components'\nimport theme from '../../src/styles/theme'\n\nexport type SpacingKeys = keyof typeof theme.spacings\n\ntype AttributeProps = 'padding' | 'gap' | 'margin'\n\nexport const spacingModifier = {\n  none: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.none};\n  `,\n  xmini: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xmini};\n  `,\n  mini: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.mini};\n  `,\n  xxsmall: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xxsmall};\n  `,\n  xsmall: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xsmall};\n  `,\n  small: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.small};\n  `,\n  medium: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.medium};\n  `,\n  large: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.large};\n  `,\n  xlarge: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xlarge};\n  `,\n  xxlarge: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xxlarge};\n  `\n}\n"],"names":[],"sourceRoot":""}