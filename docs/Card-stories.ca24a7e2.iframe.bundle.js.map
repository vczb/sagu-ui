{"version":3,"file":"Card-stories.ca24a7e2.iframe.bundle.js","mappings":";AAIA;;;;AAIA;;;;;;;;;;;;;;;;ACFA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAGA;AACA;AACA;;;AAGA;;;AAGA;;AAKA;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;;;AAGA;AACA;;AAEA;;AAEA;;;;ACRA;;AAEA;;;AAKA;ACJA;;;;AAKA;AACA;;AAEA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;;;;;;;AAOA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;;;AC9BA;AAEA;;AAEA;AAIA;AACA;;;;AAIA;;AAIA;AACA;AACA;AACA;;AAIA;AAKA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAIA;AACA;;AAEA;;;;;AAKA;;;;AAIA;AACA;;;;;AAKA;;AAEA;;;AAGA;;;AAGA;;;;;;;AASA;AACA;;;AApFA;;;;AA6FA;AACA;AA/FA;AAAA;;AAmGA;AAGA;;;;;;;ACzGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AACA;;;ACPA;AACA;;AAGA;ACXA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA","sources":["webpack://sagu-ui/./src/animations/placeholder.ts","webpack://sagu-ui/./src/packages/Button/styles.ts","webpack://sagu-ui/./src/packages/Card/styles.ts","webpack://sagu-ui/./src/packages/Divider/index.tsx","webpack://sagu-ui/./src/packages/Heading/styles.ts","webpack://sagu-ui/./src/packages/Slider/styles.ts","webpack://sagu-ui/./src/packages/TextContent/styles.ts","webpack://sagu-ui/./src/styles/media.ts","webpack://sagu-ui/./src/styles/spacingModifier.ts"],"sourcesContent":["import { css } from 'styled-components'\nimport { theme } from './../styles'\n\nconst placeholder = css`\n  color: ${theme.colors.neutral.lighter};\n  background-image: linear-gradient(\n    to right,\n    currentColor 0%,\n    ${theme.colors.neutral.medium} 20%,\n    currentColor 40%,\n    currentColor 100%\n  );\n  background-size: 80rem 14rem;\n  animation: placeholder 1s linear infinite forwards;\n\n  @keyframes placeholder {\n    0% {\n      background-position: -40rem 0;\n    }\n    100% {\n      background-position: 40rem 0;\n    }\n  }\n`\n\nexport default placeholder\n","import styled, { css, DefaultTheme } from 'styled-components'\nimport { ButtonProps } from '.'\nimport { spacingModifier } from '../../styles/spacingModifier'\n\nconst buttonVariants = {\n  primary: (theme: DefaultTheme) => css`\n    border-color: ${theme.colors.primary.medium};\n    color: ${theme.colors.primary.medium};\n    &:hover {\n      border-color: ${theme.colors.secondary.medium};\n      color: ${theme.colors.secondary.medium};\n    }\n    &:active {\n      border-color: ${theme.colors.secondary.dark};\n      color: ${theme.colors.secondary.dark};\n    }\n  `,\n  secondary: (theme: DefaultTheme) => css`\n    border-color: ${theme.colors.secondary.medium};\n    color: ${theme.colors.secondary.medium};\n    &:hover {\n      border-color: ${theme.colors.primary.light};\n      color: ${theme.colors.primary.light};\n    }\n    &:active {\n      border-color: ${theme.colors.primary.medium};\n      color: ${theme.colors.primary.medium};\n    }\n  `,\n  filled: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.white};\n    background: ${theme.colors.primary.medium};\n\n    &:hover {\n      background: ${theme.colors.primary.dark};\n    }\n    &:active {\n      background: ${theme.colors.primary.medium};\n    }\n  `\n}\n\nexport const Button = styled.button<\n  Pick<ButtonProps, 'variant' | 'outline' | 'size' | 'padding'>\n>`\n  ${({ theme, variant, outline, size = 'small', padding = 'xxsmall' }) => css`\n    cursor: pointer;\n    border: ${outline ? '0.2rem solid' : 'none'} ;\n    background-color: transparent;\n    font-weight: ${theme.font.weights.bold};\n    border-radius: ${theme.border.radius};\n    transition: ${theme.transitions.default};\n    font-size: ${theme.font.sizes[size]};\n    ${spacingModifier[padding](theme, 'padding')}\n    ${!!variant && buttonVariants[variant](theme)}}\n  `}\n`\n","import styled, { css } from 'styled-components'\n\nexport const Wrapper = styled.div`\n  ${({ theme }) => css`\n    display: grid;\n    grid-template-columns: 1fr;\n    padding: ${theme.spacings.xxsmall};\n    grid-gap: ${theme.spacings.xxsmall};\n    max-width: 30rem;\n    box-shadow: ${theme.shadows.default};\n    > * {\n      max-width: calc(30rem - calc(${theme.spacings.xxsmall} * 2));\n    }\n  `}\n`\n","import styled, { css } from 'styled-components'\n\nconst Divider = styled.hr`\n  ${({ theme }) => css`\n    height: 0.01rem;\n    background: ${theme.colors.neutral.darkest};\n    border: 0;\n  `}\n`\n\nexport default Divider\n","import styled, { css, DefaultTheme } from 'styled-components'\nimport { HeadingProps, lineColors } from '.'\nimport { media } from '../../styles'\n\nexport const WrapperModifiers = {\n  small: (theme: DefaultTheme) => css`\n    font-size: ${theme.font.sizes.medium};\n    &::after {\n      width: 3rem;\n    }\n  `,\n  medium: (theme: DefaultTheme) => css`\n    font-size: ${theme.font.sizes.xlarge};\n\n    ${media.sm`\n      font-size: ${theme.font.sizes.xxlarge};\n    `}\n  `,\n  huge: (theme: DefaultTheme) => css`\n    font-size: ${theme.font.sizes.huge};\n  `,\n  lineLeft: (theme: DefaultTheme, lineColor: lineColors) => css`\n    padding-left: ${theme.spacings.xsmall};\n    border-left: 0.7rem solid ${theme.colors[lineColor].medium};\n  `,\n  lineBottom: (theme: DefaultTheme, lineColor: lineColors) => css`\n    position: relative;\n    margin-bottom: ${theme.spacings.medium};\n    &::after {\n      position: absolute;\n      left: 0;\n      bottom: -1rem;\n      content: '';\n      width: 5rem;\n      border-bottom: 0.5rem solid ${theme.colors[lineColor].medium};\n    }\n  `\n}\n\nexport const Wrapper = styled.h2<HeadingProps>`\n  ${({ theme, color, lineLeft, lineBottom, lineColor, size }) => css`\n    color: ${theme.colors.base[color!]};\n\n    ${lineLeft && WrapperModifiers.lineLeft(theme, lineColor!)}\n    ${lineBottom && WrapperModifiers.lineBottom(theme, lineColor!)}\n    ${!!size && WrapperModifiers[size](theme)}\n  `}\n`\n","import styled, { css } from 'styled-components'\nimport { placeholder } from '../../animations/'\nimport { SliderProps } from '.'\nimport { DotType } from './Dot'\n\n// Why 20px?\n// dotsHeight = 8px, if we set dotsSpace to 20px, so we have a two-side (top, bottom) space is 6px.\n// It's good enough to users see dots clearly\nconst dotsHeight = '8px'\nconst dotsSpace = '20px'\n\n// 20px is for the height of the dots\nconst figureModifiers = {\n  small: (dots?: boolean) => css`\n    max-width: 40rem;\n    height: ${dots ? `calc(20rem + ${dotsSpace})` : '20rem'};\n  `,\n  large: (dots?: boolean) => css`\n    max-width: 80rem;\n    height: ${dots ? `calc('40rem' + ${dotsSpace})` : '40rem'};\n  `\n}\n\nexport const Figure = styled.figure<Pick<SliderProps, 'size' | 'dots'>>`\n  ${({ size, dots }) => css`\n    position: relative;\n    overflow-x: hidden;\n    height: max-content;\n    ${!!size && figureModifiers[size](dots)}\n  `}\n`\n\nexport const Loading = styled.div<Pick<SliderProps, 'size' | 'dots'>>`\n  ${({ size, dots }) => css`\n    ${!!size && figureModifiers[size](dots)}\n    ${placeholder}\n  `}\n`\n\nexport const Image = styled.img<{\n  active?: boolean\n  position: number\n  dots: boolean\n}>`\n  ${({ theme, active, position, dots }) => css`\n    position: absolute;\n    width: 100%;\n    height: ${dots ? `calc(100% - ${dotsSpace})` : '100%'};\n    transition: transform ${theme.transitions.default};\n    transform: translateX(${active ? 0 : position * 100 + '%'});\n    object-fit: cover;\n    border-radius: ${theme.border.mini};\n\n    ${placeholder}\n  `}\n`\n\nexport const SlideButton = styled.button<{ dots: boolean }>`\n  ${({ theme, dots }) => css`\n    position: absolute;\n    top: ${dots ? `calc(50% - ${dotsSpace}/2)` : '50%'};\n    transform: translateY(-50%) rotate(270deg);\n    width: 2rem;\n    height: 2rem;\n    border-radius: 50%;\n    background: ${theme.colors.neutral.lightest};\n    border: none;\n    outline: none;\n    cursor: pointer;\n    color: ${theme.colors.primary.light};\n    transition: all ${theme.transitions.default};\n    opacity: 0.7;\n\n    &:hover,\n    &:focus {\n      box-shadow: ${theme.shadows.focus};\n      opacity: 1;\n      color: ${theme.colors.neutral.darkest};\n    }\n    &:first-of-type {\n      left: ${theme.spacings.xsmall};\n    }\n    &:last-of-type {\n      right: ${theme.spacings.xsmall};\n    }\n    &:disabled {\n      opacity: 0.2;\n      cursor: default;\n    }\n  `}\n`\n\nexport const Dots = styled.div`\n  ${() => css`\n    display: inline-flex;\n    position: absolute;\n    bottom: calc((${dotsSpace} - ${dotsHeight}) / 2);\n    left: 50%;\n    transform: translateX(-50%);\n  `}\n`\n\nexport const Dot = styled.div<Pick<DotType, 'active'>>`\n  ${({ theme, active }) => css`\n    width: ${dotsHeight};\n    height: ${dotsHeight};\n    border-radius: 50%;\n    background-color: ${active\n      ? theme.colors.primary.dark\n      : theme.colors.neutral.darker};\n    margin-right: ${theme.spacings.xxsmall};\n\n    :last-child {\n      margin-right: 0;\n    }\n  `}\n`\n","import styled, { DefaultTheme, css } from 'styled-components'\nimport { TextContentProps } from '.'\n\nconst colorModifier = {\n  white: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.white};\n  `,\n  black: (theme: DefaultTheme) => css`\n    color: ${theme.colors.base.black};\n  `,\n  primary: (theme: DefaultTheme) => css`\n    color: ${theme.colors.primary.medium};\n  `,\n  secondary: (theme: DefaultTheme) => css`\n    color: ${theme.colors.secondary.medium};\n  `\n}\n\nexport const Text = styled.p<\n  Pick<TextContentProps, 'size' | 'disabled' | 'color'>\n>`\n  ${({ theme, disabled = false, size = 'small', color = 'black' }) => css`\n    font-size: ${theme.font.sizes[size]};\n    ${disabled\n      ? `color: ${theme.colors.base.disabled};`\n      : colorModifier[color](theme)};\n  `}\n`\n","import { css } from 'styled-components'\n\ntype Breakpoints = {\n  [key: string]: string\n}\n\nconst breakpoints: Breakpoints = {\n  xs: '480px',\n  sm: '768px',\n  md: '992px',\n  lg: '1200px'\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst media = Object.keys(breakpoints).reduce((acc: any, view) => {\n  acc[view] = (args: string) => css`\n    @media (min-width: ${breakpoints[view]}) {\n      ${args};\n    }\n  `\n  return acc\n}, {})\n\nexport default media\n","import { DefaultTheme, css } from 'styled-components'\nimport theme from '../../src/styles/theme'\n\nexport type SpacingKeys = keyof typeof theme.spacings\n\ntype AttributeProps = 'padding' | 'gap' | 'margin'\n\nexport const spacingModifier = {\n  none: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.none};\n  `,\n  xmini: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xmini};\n  `,\n  mini: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.mini};\n  `,\n  xxsmall: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xxsmall};\n  `,\n  xsmall: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xsmall};\n  `,\n  small: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.small};\n  `,\n  medium: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.medium};\n  `,\n  large: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.large};\n  `,\n  xlarge: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xlarge};\n  `,\n  xxlarge: (theme: DefaultTheme, attribute: AttributeProps) => css`\n    ${attribute}: ${theme.spacings.xxlarge};\n  `\n}\n"],"names":[],"sourceRoot":""}